[gd_resource type="VisualShader" load_steps=5 format=2]

[sub_resource type="VisualShaderNodeInput" id=1]
input_name = "normal"

[sub_resource type="VisualShaderNodeIf" id=2]
default_input_values = [ 0, 0.0, 1, 1.0, 2, 1e-05, 3, Vector3( 0, 0, 0 ), 4, Vector3( 0, 0, 0 ), 5, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeScalarUniform" id=3]
uniform_name = "color_mode"

[sub_resource type="VisualShaderNodeColorUniform" id=4]
uniform_name = "color"

[resource]
code = "shader_type spatial;
render_mode specular_disabled, unshaded, shadows_disabled, ambient_light_disabled;

uniform float color_mode;
uniform vec4 color : hint_color;



void vertex() {
// Output:0

}

void fragment() {
// ScalarUniform:5
	float n_out5p0 = color_mode;

// Input:2
	vec3 n_out2p0 = NORMAL;

// ColorUniform:7
	vec3 n_out7p0 = color.rgb;
	float n_out7p1 = color.a;

// If:3
	float n_in3p1 = 1.00000;
	float n_in3p2 = 0.00001;
	vec3 n_out3p0;
	if(abs(n_out5p0 - n_in3p1) < n_in3p2)
	{
		n_out3p0 = n_out2p0;
	}
	else if(n_out5p0 < n_in3p1)
	{
		n_out3p0 = n_out7p0;
	}
	else
	{
		n_out3p0 = n_out2p0;
	}

// Output:0
	ALBEDO = n_out3p0;
	NORMAL = n_out2p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 0, 55.7243 )
modes/specular = 4
flags/ambient_light_disabled = true
flags/shadows_disabled = true
flags/unshaded = true
nodes/fragment/0/position = Vector2( 1400, 200 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( 200, 760 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( 1000, 200 )
nodes/fragment/5/node = SubResource( 3 )
nodes/fragment/5/position = Vector2( 200, 200 )
nodes/fragment/7/node = SubResource( 4 )
nodes/fragment/7/position = Vector2( 200, 320 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 7, 5, 0, 3, 0, 3, 0, 0, 0, 2, 0, 3, 3, 2, 0, 3, 4, 7, 0, 3, 5 )
